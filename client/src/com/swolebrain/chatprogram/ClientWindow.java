/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.swolebrain.chatprogram;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Victor
 */
public class ClientWindow extends javax.swing.JFrame implements Runnable{    
    private Client client;
    private boolean running;
    private Thread run;
    
    public ClientWindow(String name, String address, int port) {
        client = new Client(name, address, port, this);
        initComponents();
        setTitle("Cherno Chat Client");
        setLocationRelativeTo(null);
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error:\n"+ex.toString());
            System.err.println(ex.toString());
        }
        String connectionResult = client.openConnection();
        console("Attempting Connection to "+address+":"+port+", user: "+name);
        //String connection = name+" connected from "+address+":"+port;
        if (connectionResult.length()> 1){
            jTextAreaHistory.append(connectionResult);
            setVisible(true);
            return;
        }
        String connection = "/c/"+name;
        client.send(connection.getBytes());
        setVisible(true);
        txtMessage.requestFocus();
        run = new Thread(this, "ClientRunning");
        run.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaHistory = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(810, 450));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 0, 0};
        layout.rowHeights = new int[] {0, 0, 0};
        getContentPane().setLayout(layout);

        jTextAreaHistory.setEditable(false);
        jTextAreaHistory.setColumns(20);
        jTextAreaHistory.setLineWrap(true);
        jTextAreaHistory.setRows(5);
        jTextAreaHistory.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaHistory);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 98.0;
        gridBagConstraints.weighty = 85.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 15.0;
        gridBagConstraints.weighty = 15.0;
        getContentPane().add(btnSend, gridBagConstraints);

        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMessageKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtMessage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 85.0;
        gridBagConstraints.weighty = 15.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        send();
    }//GEN-LAST:event_btnSendActionPerformed

    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            send();
        }
        if (evt.getKeyCode() == KeyEvent.VK_TAB){
            btnSend.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtMessageKeyPressed

    private void txtMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtMessage.setText("");
        }
    }//GEN-LAST:event_txtMessageKeyReleased

    public void run(){
        running=true;
        while(running){
            client.receive();
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void send(){
        String msg = this.txtMessage.getText();
        if (msg.equals("")) return;
        //console(client.getName()+": "+msg);
        client.send(("/m/"+client.getName()+": "+msg).getBytes());
        txtMessage.setText("");
        txtMessage.requestFocusInWindow();
    }
    
    public void console (String message){
        jTextAreaHistory.append(message+"\n");
        this.jTextAreaHistory.setCaretPosition(jTextAreaHistory.getDocument().getLength());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaHistory;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables
}
